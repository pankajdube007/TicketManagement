@model TicketManagement.ViewModels.AssignRoleViewModel




<div class="col-md-6 col-xs-12">
    <div class="x_panel">
        <div class="x_title">
            <h2>Assign Roles</h2>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <br />


            @if (TempData["MessageAssigned_Menu"] != null)
            {
                <div class="alert alert-success alert-dismissible">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    <strong>Message!</strong> @TempData["MessageAssigned_Menu"]
                </div>
            }

            @if (TempData["AlreadyAssignedMessage_Menu"] != null)
            {
                <div class="alert alert-danger alert-dismissible">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    <strong>Message!</strong> @TempData["AlreadyAssignedMessage_Menu"]
                </div>
            }

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "mandatory" })
                    @Html.DropDownListFor(m => m.RoleId, new SelectList(Model.RolesList, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label class="control-label">Services</label>
                    <div style="max-height: 300px;overflow: auto;" id="checkboxContainer"></div>
                    <div class="clearfix"></div>
                </div>

                <div class="form-group">
                    <button class="btn btn-round btn-success" onclick="FormSubmit()" type="button"><i class="fa fa-check-circle"></i> Assign</button>
                    <a href="/AssignRolestoMenu/Assign" class="btn btn-round btn-primary"><i class="glyphicon glyphicon-repeat"></i> Clear</a>
                </div>

            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        var urlSource = '/AssignRolestoMenu/GetAllActiveMenu';
        $.ajax({
            url: urlSource,
            method: "POST",
            success: function (result) {
                $('#checkboxContainer').empty();

                var content = "";
                for (var i = 0; i < result.length; i++) {
                    content += '<input type="checkbox" class="checkboxes flat" value="' + result[i].Value + '" name="[' + [i] + '].Checked" />' + ' ' + result[i].Text + '</br>';
                    content += '<input type="hidden" name="[' + [i] + '].Text"  value="' + result[i].Text + '" />';
                    content += '<input type="hidden" name="[' + [i] + '].Value" value="' + result[i].Value + '" />';
                }

                $('#checkboxContainer').html(content);
            }
        });

    });

    function FormSubmit() {
        var menuChecked = [];
        $(".checkboxes:checked").each(function () {
            menuChecked.push(this.value);
        });
        if ($("#RoleId").val() == "") {
            alert('Choose Role');
        }
        else if (menuChecked.length == 0) {
            alert('Choose Menu to Assign Role');
        }
        else {
            var urlSource = '/AssignRolestoMenu/Assign';
            $.ajax({
                url: urlSource,
                method: "POST",
                data:
                {
                    "RoleId": $("#RoleId").val(),
                    "SelectedMenuId": menuChecked
                },
                success: function (data)
                {
                    if (data.Error != "")
                    {
                        alert(data.Error);
                    }

                    if (data.Success != "")
                    {
                        alert(data.Success);
                        window.location.reload();
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
        }
    }
</script>