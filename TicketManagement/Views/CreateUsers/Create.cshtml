@model TicketManagement.ViewModels.CreateUserViewModel

<div class="col-md-12 col-xs-12">
    <div class="x_panel">
        <div class="x_title">
            <h2>Create User</h2>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <br />
            @if (TempData["MessageCreateUsers"] != null)
            {
                <div class="alert alert-success alert-dismissible">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    <strong>Message!</strong> @TempData["MessageCreateUsers"]
                </div>
            }

            @if (TempData["MessageCreateUsersErrors"] != null)
            {
                <div class="alert alert-danger alert-dismissible">
                    <a href="" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    <strong>Message!</strong> @TempData["MessageCreateUsersErrors"]
                </div>
            }

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @using (Html.BeginForm("Create", "CreateUsers", new { @id = "Userform" }))
            {
                @Html.AntiForgeryToken()

                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "mandatory" })
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @maxlength = 40, @onkeypress = "return onlyspecchar(event);" })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "mandatory" })
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "mandatory" })
                    @Html.TextBoxFor(model => model.EmailId, new { @class = "form-control", @maxlength = 50 })
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                </div>



                <div class="col-md-4 col-sm-4 col-xs-12">
                    <br />
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "mandatory" })
                    @Html.RadioButtonFor(model => model.Gender, "M") @Html.Label("", "Male")
                    @Html.RadioButtonFor(model => model.Gender, "F") @Html.Label("", "Female")
                    <br />
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "mandatory" })
                    @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control", @maxlength = 10 })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">

                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">

                    @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "mandatory" })
                    @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @readonly = "readonly", @onfocus = "this.removeAttribute('readonly');", @maxlength = 20, @onkeypress = "return onlyspecchar(event);" })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "mandatory" })
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", @maxlength = 150, @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "mandatory" })
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4 col-sm-4 col-xs-12">
                    @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "mandatory" })
                    @Html.DropDownListFor(model => model.RoleId, new SelectList(Model.ListRole, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4 col-sm-4 col-xs-12">
                    <br />
                    <button class="btn btn-round btn btn-success" id="btnsubmit" name="btnsubmit" type="submit"> Submit</button>
                    <a href="/CreateUsers/Create" class="btn btn-round btn btn-primary"><i class="glyphicon glyphicon-repeat"></i> Clear</a>
                </div>

            }
        </div>
    </div>
</div>

<script src="~/Scripts/crypto/sha512.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        $("#btnsubmit").click(function () {
            if ($('#Password').val() != "" && $('#ConfirmPassword').val() != "") {
                if (validatePassword($('#Password').val()) == false) {
                    alert('New Password Must Have Minimum 7 characters at least 1 Alphabet, 1 Number and 1 Special Character !');
                    return false;
                }
                else {
                    var password = $('#Password').val();
                    var passwordhash = sha512(password);

                    var confirmpassword = $('#ConfirmPassword').val();
                    var confirmpasswordhash = sha512(confirmpassword);

                    $('#Password').val(passwordhash);
                    $('#ConfirmPassword').val(confirmpasswordhash);
                    $("#Userform").submit();
                }
            }
        });

        $("#Password").blur(function (event) {
            if ($('#Password').val() != "") {
                if (validatePassword($("#Password").val()) == false) {
                    alert('New Password Must Have Minimum 7 characters at least 1 Alphabet, 1 Number and 1 Special Character !');
                    $("#Password").val('');
                }

                var data = $("#Password").val().length;
                if (data > 20) {
                    alert('Maximum 20 character password is Allowed!');
                    $("#Password").val('');
                }
            }

        });
    });

    function validatePassword(password) {
        var reg = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@@$!%*#?&])[A-Za-z\d$@@$!%*#?&]{7,}$/;
        if (reg.test(password)) {
            return true;
        } else {
            return false;
        }
    }


</script>
